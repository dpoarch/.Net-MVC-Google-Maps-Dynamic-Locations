@model GoogleMap.Place

@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>

<div>
    <h4>Map Location</h4>
    <div id="map" style="height: 400px;"></div>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.location_name)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.location_name)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.longitude)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.longitude)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.latitude)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.latitude)
        </dd>

    </dl>
</div>
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.Id }) |
    @Html.ActionLink("Back to List", "Index")
</p>

<script>

    // In the following example, markers appear when the user clicks on the map.
    // The markers are stored in an array.
    // The user can then click an option to hide, show or delete the markers.
    var map;
    var markers = [];

    function initMap() {
        var haightAshbury = { lat: @Model.latitude.ToString(), lng: @Model.longitude.ToString() };
        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 12,
            center: haightAshbury,
            mapTypeId: 'terrain'
        });

        // This event listener will call addMarker() when the map is clicked.

        // Adds a marker at the center of the map.
        addMarker(haightAshbury);
    }

    // Adds a marker to the map and push to the array.
    function addMarker(location) {
        deleteMarkers();
        var marker = new google.maps.Marker({
            position: location,
            map: map
        });
        markers.push(marker);
    }

    // Sets the map on all markers in the array.
    function setMapOnAll(map) {
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(map);
        }
    }

    // Removes the markers from the map, but keeps them in the array.
    function clearMarkers() {
        setMapOnAll(null);
    }

    // Shows any markers currently in the array.
    function showMarkers() {
        setMapOnAll(map);
    }

    // Deletes all markers in the array by removing references to them.
    function deleteMarkers() {
        clearMarkers();
        markers = [];
    }
</script>
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCflE39EmUR8iVkVNro7F9RoigdOOz9Lfo&callback=initMap">
</script>